name: release
on:
  push:
    tags:
      - "*.*.*"
jobs:
  nix-patch:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Git Clone
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.repository.default_branch }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          trust_level: 5
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Install Nix
        uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Strip Tag Prefix
        id: strip_tag
        run: |
          TAG=${GITHUB_REF##*/}
          STRIPPED_TAG=${TAG#v}
          echo "tag=${STRIPPED_TAG}" >> $GITHUB_OUTPUT

      - name: Patch Version
        run: |
          sed -i 's/version = "[^"]*";/version = "${{ steps.strip_tag.outputs.tag }}";/' default.nix

      - name: Patch Hash
        run: |
          sed -i 's/hash =/# hash =/' default.nix
          set +e
          nix build .#default 2>&1 | tee error.log
          set -e
          HASH=$(grep -oP '(got|specified):\s+(sha256-\S+)' error.log | awk '{print $2}' | tail -1)
          if [ -z "$HASH" ]; then
            echo "Failed to extract hash from error log"
            cat error.log
            exit 1
          fi
          sed -i "s|# hash = \"[^\"]*\";|hash = \"$HASH\";|" default.nix

      - name: Patch CargoHash
        run: |
          set +e
          nix build .#default 2>&1 | tee error.log
          set -e
          HASH=$(grep -oP '(got|specified):\s+(sha256-\S+)' error.log | awk '{print $2}' | tail -1)
          if [ -z "$HASH" ]; then
            echo "Failed to extract cargoHash from error log"
            cat error.log
            exit 1
          fi
          sed -i "s|cargoHash = \"[^\"]*\";|cargoHash = \"$HASH\";|" default.nix

      - name: Verify Build
        run: |
          nix build .#default
          ./result/bin/gpg-import version

      - name: Commit Changes
        run: |
          git add default.nix
          git commit -S -m "chore(nix): bump version of gpg-import to ${{ steps.strip_tag.outputs.tag }} [skip ci]"
          git push

  build:
    runs-on: ${{ matrix.platform.runs-on }}
    name: build / ${{ matrix.platform.name }}
    needs: nix-patch
    strategy:
      matrix:
        platform:
          - name: linux_x86_64_musl
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - name: linux_aarch64_musl
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true
          - name: darwin_x86_64
            runs-on: macos-15
            target: x86_64-apple-darwin
            use-cross: false
          - name: darwin_aarch64
            runs-on: macos-15
            target: aarch64-apple-darwin
            use-cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Build
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1
        with:
          use-cross: ${{ matrix.platform.use-cross }}
          command: build
          args: --locked --release --target ${{ matrix.platform.target }}

      - name: Archive
        id: archive
        shell: bash
        run: |
          EXE_SUFFIX=""
          case ${{ matrix.platform.target }} in
            *-pc-windows-*)
              EXE_SUFFIX=".exe"
              ;;
          esac;
          PKG_SUFFIX=".tar.gz";
          case ${{ matrix.platform.target }} in
            *-pc-windows-*)
              PKG_SUFFIX=".zip"
              ;;
          esac;
          PKG_NAME=gpg-import-${{ github.ref_name }}-${{ matrix.platform.target }}$PKG_SUFFIX
          PKG_DIR=archive/gpg-import
          mkdir -p $PKG_DIR
          cp target/${{ matrix.platform.target }}/release/gpg-import$EXE_SUFFIX $PKG_DIR/
          cp README.md LICENSE $PKG_DIR/

          pushd $PKG_DIR >/dev/null
          case ${{ matrix.platform.target }} in
            *-pc-windows-*)
              7z -y a "${PKG_NAME}" * | tail -2
              ;;
            *)
              tar czf "${PKG_NAME}" *
              ;;
          esac;
          popd >/dev/null

          # Output path to archive for future upload
          echo "archive-name=${PKG_NAME}" >> $GITHUB_OUTPUT
          echo "archive-path=${PKG_DIR}/${PKG_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Archive
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.archive.outputs.archive-name }}
          path: ${{ steps.archive.outputs.archive-path }}
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    name: release
    permissions:
      contents: write
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download Archives
        id: download
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: /tmp/archives

      - name: Move Archives
        shell: bash
        run: |
          mkdir -p ~/archives
          find ${{ steps.download.outputs.download-path }} -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} ~/archives/ \;

      - name: Create Release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          artifacts: "~/archives/*"
          makeLatest: true
          name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
